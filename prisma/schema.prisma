// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id          String       @id @default(uuid())
  userId      String
  title       String       @db.Text
  description String?      @db.Text
  imageUrl    String?      @db.Text
  price       Float?
  isPublished Boolean      @default(false)
  categoryID  String?
  category    Category?    @relation(fields: [categoryID], references: [id])
  attachments Attachment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Chapter     Chapter[]
  Purchase    Purchase[]

  @@index([categoryID])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id        String   @id @default(uuid())
  courseId  String
  Course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  name      String
  url       String   @db.Text
  createdAt DateTime @default(now())
  assetId   String   @unique

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData  MuxData?
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assiteId   String  @unique
  playBackId String?
  chapterId  String  @unique
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId   String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([chapterId])
  @@index([userId, chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model StripeCustomer {
  id              String @id @default(uuid())
  userId          String @unique
  stripCustomerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
